use ast::*;

pub ast -> Vec<Statement>
    = whitespace* s:statement* whitespace* { s }

pub single_line -> Line
    = whitespace* s:statement whitespace* comment? { Line::Statement(s) }
    / whitespace* e:expression whitespace* comment? { Line::Expression(e) }

pub statement -> Statement
    = "let" whitespace+ ident:identifier whitespace* "=" whitespace* e:expression whitespace* ";" whitespace* {
        Statement::DeclareVar(ident, e)
    }
    / ident:identifier whitespace* op:assign_op whitespace* e:expression whitespace* ";" whitespace* {
        Statement::MutateVar(op, ident, e)
    }
    / if_s:if_statement elif_s:elif_statement* else_s:else_statement? {
        let else_if = if elif_s.len() == 0 {
            None
        } else {
            Some(elif_s)
        };
        Statement::If(if_s, else_if, else_s)
    }
    / "while" whitespace+ cond:expression whitespace* "{" whitespace* s:statement* whitespace* "}" whitespace* {
        Statement::While(cond, s)
    }
    / "println" e:expression_list whitespace* ";" whitespace* {
        match e {
            Some(exprs) => Statement::Println(exprs),
            None => Statement::Println(Vec::new()),
        }
    }
    / "print" e:expression_list whitespace* ";" whitespace* {
        match e {
            Some(exprs) => Statement::Print(exprs),
            None => Statement::Print(Vec::new()),
        }
    }
    / "typeof" whitespace+ e:expression ";" whitespace* {
        Statement::Typeof(Box::new(e))
    }
    / "exit" e:maybe_expression whitespace* ";" whitespace* {
        match e {
            Some(val) =>  Statement::Exit(val),
            None => Statement::Exit(Expr::Literal(Value::Num(0.0))),
        }
    }
    / e:expression whitespace* ";" whitespace* {
        Statement::Expression(e)
    }

expression_list -> Option<Vec<Expr>>
    = whitespace+ e:expression ** (whitespace* "," whitespace*) { Some(e) }
    / whitespace* { None }

maybe_expression -> Option<Expr>
    = whitespace+ e:expression whitespace* { Some(e) }
    / whitespace* { None }

if_statement -> IfStatement
    = "if" whitespace+ cond:expression whitespace* "{" whitespace* s:statement* whitespace* "}" whitespace* {
        IfStatement {
            e: cond,
            s: s,
        }
    }

elif_statement -> IfStatement
    = "elif" whitespace+ cond:expression whitespace* "{" whitespace* s:statement* whitespace* "}" whitespace* {
        IfStatement {
            e: cond,
            s: s,
        }
    }

else_statement -> Vec<Statement>
    = "else" whitespace* "{" whitespace* s:statement* whitespace* "}" whitespace* {
        s
    }

pub expression -> Expr
= #infix<super_atom> {
    #L x (whitespace* "||" whitespace*) y { Expr::BoolChain(BoolLogic::Or, Box::new(x), Box::new(y)) }
    #L x (whitespace* "&&" whitespace*) y { Expr::BoolChain(BoolLogic::And, Box::new(x), Box::new(y)) }

    #L x (whitespace* "==" whitespace*) y { Expr::Comparison(CompOp::Equal, Box::new(x), Box::new(y)) }
       x (whitespace* "!=" whitespace*) y { Expr::Comparison(CompOp::NotEq, Box::new(x), Box::new(y)) }

    #L x (whitespace* "<" whitespace*) y { Expr::Comparison(CompOp::Lt, Box::new(x), Box::new(y)) }
       x (whitespace* "<=" whitespace*) y { Expr::Comparison(CompOp::Le, Box::new(x), Box::new(y)) }
       x (whitespace* ">" whitespace*) y { Expr::Comparison(CompOp::Gt, Box::new(x), Box::new(y)) }
       x (whitespace* ">=" whitespace*) y { Expr::Comparison(CompOp::Ge, Box::new(x), Box::new(y)) }

    #L x (whitespace* "+"  whitespace*) y { Expr::BinOp(Op::Add, Box::new(x), Box::new(y)) }
       x (whitespace* "-"  whitespace*) y { Expr::BinOp(Op::Sub, Box::new(x), Box::new(y)) }

    #L x (whitespace* "*"  whitespace*) y { Expr::BinOp(Op::Mul, Box::new(x), Box::new(y)) }
       x (whitespace* "/"  whitespace*) y { Expr::BinOp(Op::Div, Box::new(x), Box::new(y)) }
       x (whitespace* "%"  whitespace*) y { Expr::BinOp(Op::Mod, Box::new(x), Box::new(y)) }

    #R x (whitespace* "**" whitespace*) y { Expr::BinOp(Op::Exp, Box::new(x), Box::new(y)) }
    #R x (whitespace+ "as" whitespace+) y { Expr::Typecast(Box::new(x), Box::new(y)) }
}

assign_op -> AssignOp
    = "="  { AssignOp::Equals }
    / "+=" { AssignOp::AddEq }
    / "-=" { AssignOp::SubEq }
    / "*=" { AssignOp::MulEq }
    / "/=" { AssignOp::DivEq }
    / "%=" { AssignOp::ModEq }

pub super_atom -> Expr
    = i:index { i }
    / n:negation { n }
    / t:type_ident { Expr::Literal(Value::Type(t)) }
    / a:atom { a }

negation -> Expr
    = "!" whitespace* e:(super_atom) { Expr::UnOp(UnaryOp::Not, Box::new(e)) }

index -> Expr
    = var:atom b:brackets+ {
        let mut iter = b.into_iter();
        let first = iter.next().unwrap();
        iter.into_iter()
            .fold(
                Expr::Index(Box::new(var), Box::new(first)),
                |prev, next| {
                    Expr::Index(Box::new(prev), Box::new(next))
                }
            )
    }

brackets -> Expr
    = "[" whitespace* e:expression whitespace* "]" { e }

pub atom -> Expr
    = "(" e:expression ")" { e }
    / v:value { v }
    / r:reference { Expr::Reference(r) }

pub value -> Expr
    = a:array { a }
    / v:(number/string/boolean) { Expr::Literal(v) }

pub type_ident -> Type
    = "num" { Type::Num }
    / "string" { Type::String }
    / "bool" { Type::Boolean }
    / "array" { Type::Array }
    / "type" { Type::Type }


reference -> String // Variable lookup
    = ident:identifier { ident }

array -> Expr
    = "[" whitespace* e:(expression ** (whitespace* "," whitespace*)) whitespace* "]" { Expr::Array(e) }

string -> Value
    // To-Do: Make escapes work
    = "\"" text:$([^"]*) "\"" { Value::String(text.to_string()) }

boolean -> Value
    = "true" { Value::Boolean(true) }
    / "false" { Value::Boolean(false) }

identifier -> String = text:$(character+ (character/digit/"_")*) { text.to_string() }

// keyword = "true" / "false" / "let" / "print" / "println" / "while" / "if" / "elif" / "else" / "exit"

comment = #quiet<"//" [^\n\r]*>

number -> Value
    = s:$("-")? n:$(float) {
        Value::Num([s, n].concat().replace("_", "").parse().unwrap())
    }
    / s:$("-")? n:$(int) {
        Value::Num([s, n].concat().replace("_", "").parse().unwrap())
    }

float
    = int* "." int+

int
    = digit (digit / "_")*

digit
    = [0-9]

character
    = [a-zA-Z]

EOF = #quiet<!.>

whitespace = #quiet<[ \n\r\t] / comment>
